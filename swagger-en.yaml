openapi: 3.0.0
info:
  title: CumRoad Clone API
  description: A RESTful API for an e-commerce platform
  version: 1.0.0
servers:
  - url: /
    description: Current server
tags:
  - name: Users
    description: User management
  - name: Sessions
    description: Authentication
  - name: Products
    description: Product management
  - name: Orders
    description: Order management
paths:
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - id: 1
                  email: user@example.com
                  name: John Doe
                  role: user
                  createdAt: '2023-01-01T00:00:00.000Z'
                  updatedAt: '2023-01-01T00:00:00.000Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            example:
              email: user@example.com
              password: password123
              name: John Doe
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                email: user@example.com
                name: John Doe
                role: user
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                email: user@example.com
                name: John Doe
                role: user
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
            example:
              name: John Updated
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                email: user@example.com
                name: John Updated
                role: user
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /sessions:
    post:
      summary: Login
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            example:
              email: user@example.com
              password: password123
      responses:
        '201':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      token:
                        type: string
              example:
                id: 1
                email: user@example.com
                name: John Doe
                role: user
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Logout
      tags:
        - Sessions
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /products:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              example:
                - id: 1
                  name: Product 1
                  description: Product description
                  price: 19.99
                  imageUrl: https://example.com/image.jpg
                  userId: 1
                  createdAt: '2023-01-01T00:00:00.000Z'
                  updatedAt: '2023-01-01T00:00:00.000Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new product
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
            example:
              name: New Product
              description: Product description
              price: 29.99
              imageUrl: https://example.com/image.jpg
      responses:
        '201':
          description: Product created successfully
          headers:
            Location:
              schema:
                type: string
              description: URL of the created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              example:
                id: 2
                name: New Product
                description: Product description
                price: 29.99
                imageUrl: https://example.com/image.jpg
                userId: 1
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /products/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              example:
                id: 1
                name: Product 1
                description: Product description
                price: 19.99
                imageUrl: https://example.com/image.jpg
                userId: 1
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update product
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateInput'
            example:
              name: Updated Product
              price: 39.99
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              example:
                id: 1
                name: Updated Product
                description: Product description
                price: 39.99
                imageUrl: https://example.com/image.jpg
                userId: 1
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete product
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /orders:
    get:
      summary: Get all orders
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              example:
                - id: 1
                  userId: 1
                  productId: 1
                  quantity: 2
                  totalPrice: 39.98
                  status: pending
                  createdAt: '2023-01-01T00:00:00.000Z'
                  updatedAt: '2023-01-01T00:00:00.000Z'
                  Product:
                    id: 1
                    name: Product 1
                    description: Product description
                    price: 19.99
                    imageUrl: https://example.com/image.jpg
                    userId: 1
                    createdAt: '2023-01-01T00:00:00.000Z'
                    updatedAt: '2023-01-01T00:00:00.000Z'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new order
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
            example:
              productId: 1
              quantity: 2
      responses:
        '201':
          description: Order created successfully
          headers:
            Location:
              schema:
                type: string
              description: URL of the created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 1
                userId: 1
                productId: 1
                quantity: 2
                totalPrice: 39.98
                status: pending
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
                Product:
                  id: 1
                  name: Product 1
                  description: Product description
                  price: 19.99
                  imageUrl: https://example.com/image.jpg
                  userId: 1
                  createdAt: '2023-01-01T00:00:00.000Z'
                  updatedAt: '2023-01-01T00:00:00.000Z'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /orders/{id}:
    get:
      summary: Get order by ID
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 1
                userId: 1
                productId: 1
                quantity: 2
                totalPrice: 39.98
                status: pending
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
                Product:
                  id: 1
                  name: Product 1
                  description: Product description
                  price: 19.99
                  imageUrl: https://example.com/image.jpg
                  userId: 1
                  createdAt: '2023-01-01T00:00:00.000Z'
                  updatedAt: '2023-01-01T00:00:00.000Z'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update order
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateInput'
            example:
              quantity: 3
              status: completed
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 1
                userId: 1
                productId: 1
                quantity: 3
                totalPrice: 59.97
                status: completed
                createdAt: '2023-01-01T00:00:00.000Z'
                updatedAt: '2023-01-01T00:00:00.000Z'
                Product:
                  id: 1
                  name: Product 1
                  description: Product description
                  price: 19.99
                  imageUrl: https://example.com/image.jpg
                  userId: 1
                  createdAt: '2023-01-01T00:00:00.000Z'
                  updatedAt: '2023-01-01T00:00:00.000Z'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete order
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '204':
          description: Order deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        name:
          type: string
    UserUpdateInput:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
          format: password
          minLength: 8
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        imageUrl:
          type: string
        userId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductInput:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        imageUrl:
          type: string
    ProductUpdateInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        imageUrl:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
        totalPrice:
          type: number
          format: float
        status:
          type: string
          enum: [pending, completed, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        Product:
          $ref: '#/components/schemas/Product'
    OrderInput:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
        quantity:
          type: integer
          minimum: 1
    OrderUpdateInput:
      type: object
      properties:
        quantity:
          type: integer
          minimum: 1
        status:
          type: string
          enum: [pending, completed, cancelled]
    Error:
      type: object
      properties:
        code:
          type: integer
        error:
          type: string
        message:
          type: string
        field:
          type: string
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 1002
            error: INVALID_PASSWORD
            message: Password must be at least 8 characters long
            field: password
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 2001
            error: AUTHENTICATION_REQUIRED
            message: Authentication is required to access this resource
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 2003
            error: UNAUTHORIZED
            message: Not authorized to perform this action
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 3001
            error: RESOURCE_NOT_FOUND
            message: The requested resource was not found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 5001
            error: SERVER_ERROR
            message: An unexpected server error occurred
